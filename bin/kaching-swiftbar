#!/usr/bin/env ruby
# frozen_string_literal: true

# This is a script for use with SwiftBar (https://swiftbar.app/) or BitBar
# (https://getbitbar.com)
#
# Symlink it into your plugins folder as <app_name>.<interval>.rb

# <bitbar.title>Kaching</bitbar.title>
# <bitbar.version>v1.0</bitbar.version>
# <bitbar.author>Aaron Madlon-Kay</bitbar.author>
# <bitbar.author.github>amake</bitbar.author.github>
# <bitbar.desc>Monitor sales on the App Store and Google Play.</bitbar.desc>
# <bitbar.dependencies>ruby</bitbar.dependencies>
# <bitbar.abouturl>https://github.com/amake/kaching</bitbar.abouturl>

Dir.chdir(File.expand_path('..', __dir__))

require 'bundler/setup'
require 'kaching'
require 'date'

CONFIG_PATH = 'config.json'

# @param data [Date]
# @return [String]
def relativize(date)
  if date.today?
    'Today'
  elsif date.yesterday?
    'Yesterday'
  elsif (Date.today - date) < 7
    "#{(Date.today - date).to_i} days ago"
  else
    date.to_s
  end
end

# @param proceeds [Hash<String,Numeric>]
# @param to_currency [String]
# @return [Numeric]
def proceeds_total(proceeds, to_currency: 'USD')
  proceeds.sum do |currency, amount|
    Kaching::Currency.convert(amount: amount, from: currency, to: to_currency)
  end
end

# @param units [Integer]
# @return [String]
def simple_unit_string(units)
  case units
  when 0 then '-'
  when 1 then '1 unit'
  else "#{units} units"
  end
end

# @param sales [Integer]
# @param refunds [Integer]
# @return [String]
def complex_unit_string(sales, refunds)
  simple = simple_unit_string(sales + refunds)
  "#{simple} (â–²#{sales}â€Šâ–¼#{refunds.abs})"
end

# @param report [Kaching::Model::Report]
# @return [String]
def units_summary(report)
  grouped_transactions = report.transactions.group_by { |t| t.units.positive? }
  sales = grouped_transactions[true]&.sum(&:units) || 0
  refunds = grouped_transactions[false]&.sum(&:units) || 0
  if sales.zero? && refunds.zero?
    '-'
  elsif sales.zero?
    simple_unit_string(refunds)
  elsif refunds.zero?
    simple_unit_string(sales)
  else
    complex_unit_string(sales, refunds)
  end
end

# @param report [Kaching::Model::Report]
# @return [String]
def proceeds_summary(report)
  proceeds_usd = proceeds_total(report.amounts)
  case report.units
  when 0 then '-'
  else format('US$%<proceeds>.2f', proceeds: proceeds_usd)
  end
end

# @param report [Kaching::Model::Report]
def vendor_summary(report)
  return 'Error' unless report

  units = units_summary(report)
  proceeds = proceeds_summary(report)
  date = relativize(report.date)
  "#{units} Â· #{proceeds} (#{date})"
end

raise "Create #{CONFIG_PATH} first" unless File.exist?(CONFIG_PATH)

Kaching::Configure.from_json_file(CONFIG_PATH)

apple =
  begin
    Kaching::AppStore.latest_sales_report
  rescue DataUnavailableError
    nil
  end
google = Kaching::GooglePlay.latest_sales_report

app_name = File.basename($PROGRAM_NAME).split('.').first || 'My App'

puts(<<~MSG)
  :applelogo: #{apple&.units || '-'} ðŸ¤– #{google.units}
  ---
  #{app_name} sales
  â€¢ App Store: #{vendor_summary(apple)}
  â€¢ Google Play: #{vendor_summary(google)}
MSG
